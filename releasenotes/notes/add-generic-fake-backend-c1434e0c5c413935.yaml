---
features:
  - |
    A new function, :func:`.make_generic_backend` has been added to the :mod:`qiskit.providers.utils`
    module. This function generates customized :class:`~.BackendV2` instances which run locally via a
    the Aer simulator (if installed) or else using :class:`~.BasicAer`.
    Users can configure the number of qubits, basis gates, coupling map,
    ability to run dynamic circuits (control flow instructions), instruction calibrations and dtm of the
    backend without having to deal with manual target construction. Qubit and gate properties are generated
    by randomly sampling from default ranges. The seed for this random generation is always fixed
    to ensure the reproducibility of the backend output, and can also be configured by the user.

    Example usage 1::

      from qiskit import QuantumCircuit, transpile
      from qiskit.providers.utils import make_generic_backend

      # Create a simple circuit
      circuit = QuantumCircuit(3)
      circuit.h(0)
      circuit.cx(0,1)
      circuit.cx(0,2)
      circuit.measure_all()
      circuit.draw('mpl')

      # Define backend with 3 qubits
      backend = make_generic_backend(num_qubits=3)

      # Transpile and run
      transpiled_circuit = transpile(circuit, backend)
      result = backend.run(transpiled_circuit).result()

    Example usage 2::

      from qiskit import QuantumCircuit, ClassicalRegister, transpile
      from qiskit.providers.utils import make_generic_backend

      # Create a circuit with classical control
      creg = ClassicalRegister(19)
      qc = QuantumCircuit(25)
      qc.add_register(creg)
      qc.h(0)
      for i in range(18):
          qc.cx(0, i + 1)
      for i in range(18):
          qc.measure(i, creg[i])
      qc.ecr(20, 21).c_if(creg, 0)

      # Define backend with custom basis gates and control flow instructions
      backend = make_generic_backend(num_qubits=25, basis_gates = ["ecr","id","rz","sx","x"], control_flow=True)

      #Transpile
      transpiled_qc = transpile(qc, backend)

    .. note::

        The noise properties generated by these class do not mimic any concrete quantum device, and should
        not be used to measure any concrete behaviors. They are "reasonable defaults" that can be used to
        test backend-interfacing functionality not tied to specific noise values of real quantum systems.
        For a more accurate simulation of existing devices, you can manually build a noise model from the
        real backend using the functionality offered in ``qiskit-aer``.
